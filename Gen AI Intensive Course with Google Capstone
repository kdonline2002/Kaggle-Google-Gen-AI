{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kerrigan/gen-ai-intensive-course-with-google-capstone?scriptVersionId=238142268\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"6aeb7e8a","metadata":{"papermill":{"duration":0.010547,"end_time":"2025-05-06T11:03:23.839717","exception":false,"start_time":"2025-05-06T11:03:23.82917","status":"completed"},"tags":[]},"source":["# <font color=\"blue\">Diabetic assistance - Gen AI Capstone 2025Q1\n","<span style=\"color: darkblue;\">Diabetes is not a simple disease and there is no \"one size fits all\" solution. Using AI to assist in a customizable and personalized way would help improve the quality of life of many people trying to navigate the ins and outs of diabetes. </span>"]},{"cell_type":"markdown","id":"27a4f62f","metadata":{"editable":false,"papermill":{"duration":0.007725,"end_time":"2025-05-06T11:03:23.859391","exception":false,"start_time":"2025-05-06T11:03:23.851666","status":"completed"},"tags":[]},"source":["# Gen AI capabilities demonstrated :\n","* Document Understanding: The code loads and processes text-based documents related to diabetes. This involves understanding the content, structure, and meaning of the text.\n","* Embeddings: The code uses client.models.embed_content to generate embeddings for the diabetes-related documents. Embeddings are numerical representations of text that capture semantic meaning.\n","* Retrieval Augmented Generation (RAG): The code implements a RAG system. Here's how it works:\n","It retrieves relevant documents from a Chroma database based on a user query.\n","It then augments the prompt sent to the LLM with the retrieved documents. This provides the LLM with context to answer the question more accurately.\n","* Vector Search/Vector Store/Vector Database: The code utilizes ChromaDB (chromadb), a vector database, to store and search the document embeddings. This allows for efficient retrieval of relevant documents based on semantic similarity.\n","* Function Calling: The code uses function calling to interact with an SQL database. The LLM analyzes the user's question and determines which SQL query is needed. It then uses the execute_query function to execute the query and respond to the user.\n","* Grounding: The code uses types.Tool(google_search=types.GoogleSearch()) to ground the model's response using external information from Google Search. This ensures the response is based on up-to-date and reliable information."]},{"cell_type":"markdown","id":"6bf3dc45","metadata":{"editable":false,"papermill":{"duration":0.013577,"end_time":"2025-05-06T11:03:23.880992","exception":false,"start_time":"2025-05-06T11:03:23.867415","status":"completed"},"tags":[]},"source":["# GenAI capabilities used for people with diabetes:\n","Overview:\n","The several GenAI capabilities (understanding diabetes-related documents, creating numerical representations of text (embeddings), using a vector database (ChromaDB) for efficient information retrieval, augmenting prompts with retrieved documents (RAG), calling functions to interact with a database (function calling) and verifying data via an external source (grounding)) can be combined to build a system that can answer questions about diabetes based on a knowledge base and external knowledge.\n","\n","Real-Life Example: \"Diabetes Assistant App\"\n","A \"Diabetes Assistant App\" powered by these technologies could work as follows:\n","* Personalized Knowledge Base: The app starts by ingesting a wealth of diabetes information: articles, guidelines, recipes, FAQs, etc. This information is converted into embeddings and stored in ChromaDB. A local database is populated with patient data from a patient's medical records to include lab results, medication, and any other relevant information.\n","* Intelligent Question Answering: A user (person with diabetes) asks a question like, \"What are some low-carb snack options that won't spike my blood sugar?\"\n","* RAG in Action: The app turns the question into an embedding and searches ChromaDB for the most relevant articles and recipes.\n","It combines the user's question and the retrieved information into a prompt for the GenAI model.\n","* Database interaction using Function Calling: The app uses function calling to run an SQL query to get lab results and medication to personalize the GenAI response.\n","Database interaction using Grounding: The app can verify the lab results with an external source before returning the final response to the user.\n","* Helpful Response: The GenAI model, now informed by the relevant knowledge and SQL data, provides a detailed, personalized response. For example: \"Based on your latest A1C and medication, here are a few low-carb snack ideas: a handful of almonds (about 1/4 cup), celery sticks with 2 tablespoons of natural peanut butter, or a small Greek yogurt (check the label for added sugar!).\"\n","\n","Benefits:\n","* Instant Access to Information: Users get quick answers to diabetes-related questions.\n","* Personalized Advice: The app tailors recommendations based on the user's health data, medication, and lifestyle.\n","* Empowerment: Users can make informed decisions about their health and manage their diabetes more effectively.\n","* Database Interaction: The patient database can be directly updated to make future responses more tailored to the patient.\n","\n","In summary, the GenAI capabilities demonstrated in the code can be applied to create a powerful diabetes management tool that provides personalized information, support, and guidance to individuals living with diabetes."]},{"cell_type":"markdown","id":"f69be153","metadata":{"editable":false,"papermill":{"duration":0.007155,"end_time":"2025-05-06T11:03:23.901792","exception":false,"start_time":"2025-05-06T11:03:23.894637","status":"completed"},"tags":[]},"source":["### <font color=\"blue\"> Section 1:\n","<span style=\"color: darkblue;\">Initial Setup."]},{"cell_type":"code","execution_count":1,"id":"fe3a0c1b","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:23.922272Z","iopub.status.busy":"2025-05-06T11:03:23.921941Z","iopub.status.idle":"2025-05-06T11:03:35.491042Z","shell.execute_reply":"2025-05-06T11:03:35.48981Z"},"papermill":{"duration":11.583706,"end_time":"2025-05-06T11:03:35.49304","exception":false,"start_time":"2025-05-06T11:03:23.909334","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.7/144.7 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.9/100.9 kB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n","jupyterlab-lsp 3.10.2 requires jupyterlab<4.0.0a0,>=3.1.0, which is not installed.\u001b[0m\u001b[31m\r\n","\u001b[0m"]}],"source":["!pip uninstall -qqy jupyterlab  # Remove unused packages from Kaggle's base image that conflict\n","!pip install -U -q \"google-genai==1.7.0\""]},{"cell_type":"code","execution_count":2,"id":"2e61c626","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:35.507502Z","iopub.status.busy":"2025-05-06T11:03:35.507165Z","iopub.status.idle":"2025-05-06T11:03:36.954997Z","shell.execute_reply":"2025-05-06T11:03:36.953715Z"},"papermill":{"duration":1.457299,"end_time":"2025-05-06T11:03:36.956938","exception":false,"start_time":"2025-05-06T11:03:35.499639","status":"completed"},"tags":[]},"outputs":[],"source":["from google import genai\n","from google.genai import types\n","from IPython.display import HTML, Markdown, display"]},{"cell_type":"code","execution_count":3,"id":"574a75c5","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:36.972187Z","iopub.status.busy":"2025-05-06T11:03:36.971595Z","iopub.status.idle":"2025-05-06T11:03:37.419565Z","shell.execute_reply":"2025-05-06T11:03:37.418411Z"},"papermill":{"duration":0.458597,"end_time":"2025-05-06T11:03:37.422073","exception":false,"start_time":"2025-05-06T11:03:36.963476","status":"completed"},"tags":[]},"outputs":[],"source":["from google.api_core import retry\n","is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n","genai.models.Models.generate_content = retry.Retry(\n","    predicate=is_retriable)(genai.models.Models.generate_content)"]},{"cell_type":"code","execution_count":4,"id":"576fe8b2","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:37.43673Z","iopub.status.busy":"2025-05-06T11:03:37.436243Z","iopub.status.idle":"2025-05-06T11:03:37.529304Z","shell.execute_reply":"2025-05-06T11:03:37.528341Z"},"papermill":{"duration":0.102616,"end_time":"2025-05-06T11:03:37.531347","exception":false,"start_time":"2025-05-06T11:03:37.428731","status":"completed"},"tags":[]},"outputs":[],"source":["from kaggle_secrets import UserSecretsClient\n","GOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")"]},{"cell_type":"code","execution_count":5,"id":"8ad4d440","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:37.54673Z","iopub.status.busy":"2025-05-06T11:03:37.546403Z","iopub.status.idle":"2025-05-06T11:03:37.983512Z","shell.execute_reply":"2025-05-06T11:03:37.982005Z"},"papermill":{"duration":0.446792,"end_time":"2025-05-06T11:03:37.985368","exception":false,"start_time":"2025-05-06T11:03:37.538576","status":"completed"},"tags":[]},"outputs":[],"source":["client = genai.Client(api_key=GOOGLE_API_KEY)"]},{"cell_type":"markdown","id":"593ed627","metadata":{"editable":false,"papermill":{"duration":0.006667,"end_time":"2025-05-06T11:03:37.99838","exception":false,"start_time":"2025-05-06T11:03:37.991713","status":"completed"},"tags":[]},"source":["### <font color=\"blue\"> Section2:"]},{"cell_type":"markdown","id":"bde78a54","metadata":{"editable":false,"papermill":{"duration":0.005876,"end_time":"2025-05-06T11:03:38.011862","exception":false,"start_time":"2025-05-06T11:03:38.005986","status":"completed"},"tags":[]},"source":["<span style=\"color: darkblue;\">This section defines configurations and uses the Gemini model to generate content based on prompts related to diabetes. It demonstrates basic prompting and text generation capabilities.\n","\n","<span style=\"color: darkblue;\">Generate text with an LLM restricted by max_output_tokens to get an intro summaries at a low energy consumption, latency, and cost."]},{"cell_type":"code","execution_count":6,"id":"88c17d9f","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:38.026228Z","iopub.status.busy":"2025-05-06T11:03:38.025929Z","iopub.status.idle":"2025-05-06T11:03:39.189149Z","shell.execute_reply":"2025-05-06T11:03:39.187886Z"},"papermill":{"duration":1.172823,"end_time":"2025-05-06T11:03:39.19116","exception":false,"start_time":"2025-05-06T11:03:38.018337","status":"completed"},"tags":[]},"outputs":[{"data":{"text/markdown":["Diabetes is a chronic condition where your body either doesn't make enough insulin (Type 1) or can't effectively use the insulin it does make (Type 2). Insulin is a hormone that helps glucose (sugar) from food get into your cells for energy. Without enough insulin or effective insulin, glucose builds up in your blood, leading to various health problems like heart disease, kidney disease, nerve damage, and vision loss. Management typically involves lifestyle changes (diet, exercise), medication, and regular monitoring of blood sugar levels.\n"],"text/plain":["<IPython.core.display.Markdown object>"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["from google.genai import types\n","\n","short_config = types.GenerateContentConfig(max_output_tokens=200)\n","\n","response1 = client.models.generate_content(\n","    model='gemini-2.0-flash',\n","    config=short_config,\n","    contents='I need a quick summary on diabetes.')\n","\n","Markdown(response1.text)"]},{"cell_type":"code","execution_count":7,"id":"35f0776f","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:39.205661Z","iopub.status.busy":"2025-05-06T11:03:39.205313Z","iopub.status.idle":"2025-05-06T11:03:40.477519Z","shell.execute_reply":"2025-05-06T11:03:40.476283Z"},"papermill":{"duration":1.281816,"end_time":"2025-05-06T11:03:40.479654","exception":false,"start_time":"2025-05-06T11:03:39.197838","status":"completed"},"tags":[]},"outputs":[{"data":{"text/markdown":["For individuals with diabetes, healthy living isn't just a suggestion, it's a necessity. Managing blood sugar levels effectively is paramount to preventing serious complications like nerve damage, kidney disease, and heart problems. A balanced diet rich in fruits, vegetables, and whole grains helps regulate glucose levels, while regular exercise increases insulin sensitivity and promotes weight management. Monitoring blood sugar regularly and taking medication as prescribed are crucial components of a holistic approach. Ultimately, embracing healthy living empowers individuals with diabetes to control their condition, improve their quality of life, and live longer, healthier lives.\n"],"text/plain":["<IPython.core.display.Markdown object>"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["response2 = client.models.generate_content(\n","    model='gemini-2.0-flash',\n","    config=short_config,\n","    contents='Write a 100 word essay on the importance of Healthy living when you have diabetes.')\n","\n","Markdown(response2.text)"]},{"cell_type":"markdown","id":"9ed911d1","metadata":{"editable":false,"papermill":{"duration":0.008253,"end_time":"2025-05-06T11:03:40.497018","exception":false,"start_time":"2025-05-06T11:03:40.488765","status":"completed"},"tags":[]},"source":["### <font color=\"blue\"> Section 3:"]},{"cell_type":"markdown","id":"7d801738","metadata":{"editable":false,"papermill":{"duration":0.007219,"end_time":"2025-05-06T11:03:40.51144","exception":false,"start_time":"2025-05-06T11:03:40.504221","status":"completed"},"tags":[]},"source":["<span style=\"color: darkblue;\">This section defines a series of documents (DOCUMENT1, DOCUMENT2, DOCUMENT3, DOCUMENT4) containing information about diabetes. It then uses these documents to create a ChromaDB database, which is a vector database used for storing and searching document embeddings. The code also defines a GeminiEmbeddingFunction, which is used to generate embeddings for the documents using the Gemini model. This setup enables semantic search and retrieval of information related to diabetes."]},{"cell_type":"code","execution_count":8,"id":"40e4b7c2","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:03:40.527038Z","iopub.status.busy":"2025-05-06T11:03:40.526605Z","iopub.status.idle":"2025-05-06T11:04:34.458481Z","shell.execute_reply":"2025-05-06T11:04:34.456932Z"},"papermill":{"duration":53.941432,"end_time":"2025-05-06T11:04:34.460466","exception":false,"start_time":"2025-05-06T11:03:40.519034","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.3/67.3 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m611.1/611.1 kB\u001b[0m \u001b[31m10.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.4/2.4 MB\u001b[0m \u001b[31m41.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m284.2/284.2 kB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m50.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.6/101.6 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.0/16.0 MB\u001b[0m \u001b[31m59.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m55.9/55.9 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m188.4/188.4 kB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.3/65.3 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.0/119.0 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m92.0/92.0 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m459.8/459.8 kB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m319.7/319.7 kB\u001b[0m \u001b[31m12.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.0/4.0 MB\u001b[0m \u001b[31m49.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m454.8/454.8 kB\u001b[0m \u001b[31m14.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.8/86.8 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25h  Building wheel for pypika (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n","google-cloud-translate 3.12.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.19.5, but you have protobuf 5.29.4 which is incompatible.\r\n","google-api-core 1.34.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5, but you have protobuf 5.29.4 which is incompatible.\r\n","google-spark-connect 0.5.2 requires google-api-core>=2.19.1, but you have google-api-core 1.34.1 which is incompatible.\r\n","pandas-gbq 0.26.1 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\r\n","bigframes 1.36.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\r\n","google-cloud-bigtable 2.28.1 requires google-api-core[grpc]<3.0.0dev,>=2.16.0, but you have google-api-core 1.34.1 which is incompatible.\u001b[0m\u001b[31m\r\n","\u001b[0m"]}],"source":["!pip install -U -q \"google-genai==1.7.0\" \"chromadb==0.6.3\""]},{"cell_type":"code","execution_count":9,"id":"97d149b8","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:34.479799Z","iopub.status.busy":"2025-05-06T11:04:34.479431Z","iopub.status.idle":"2025-05-06T11:04:34.487877Z","shell.execute_reply":"2025-05-06T11:04:34.486537Z"},"papermill":{"duration":0.020142,"end_time":"2025-05-06T11:04:34.489568","exception":false,"start_time":"2025-05-06T11:04:34.469426","status":"completed"},"tags":[]},"outputs":[],"source":["DOCUMENT1 = \"\"\"Diabetes: An Overview (April 2025)\n","What is Diabetes?\n","Diabetes mellitus is a group of metabolic diseases characterized by hyperglycemia (high blood sugar).[1][2] This occurs when the body doesn't produce enough insulin or cannot effectively use the insulin it produces.[1][3][4][5][6] Insulin is a hormone that regulates blood sugar by allowing it to enter cells for energy.[1] Chronic hyperglycemia can lead to long-term damage to various organs, including the heart, blood vessels, eyes, kidneys, and nerves.[1][7]\n","Types of Diabetes:\n","Type 1 Diabetes: An autoimmune condition where the body's immune system attacks and destroys insulin-producing beta cells in the pancreas.[5] People with type 1 diabetes require lifelong insulin therapy. It often starts in childhood but can develop at any age.[5]\n","Type 2 Diabetes: The most common form of diabetes, characterized by insulin resistance (cells don't respond properly to insulin) and often a relative insulin deficiency.[5] It's strongly linked to lifestyle factors like obesity, physical inactivity, and genetics.[4][7] However, genes or age are not under your control.[1]\n","Prediabetes: A condition where blood glucose levels are higher than normal but not high enough to be diagnosed as type 2 diabetes.[5][6] It increases the risk of developing type 2 diabetes, heart disease, and stroke.[3][7]\n","Gestational Diabetes: Develops during pregnancy in some women.[3][5][6][7] It usually resolves after delivery, but increases the mother's risk of developing type 2 diabetes later in life.[5]\n","\"\"\"\n","DOCUMENT2 = \"\"\"Symptoms:\n","Symptoms can vary depending on the type of diabetes and blood sugar levels. Some people, especially those with type 2 diabetes, may have no noticeable symptoms for years.[7] Common symptoms include:\n","Frequent urination, especially at night[8]\n","Excessive thirst[8]\n","Unexplained weight loss[2]\n","Increased hunger[1]\n","Blurred vision[7]\n","Slow-healing sores\n","Frequent infections (e.g., skin, vaginal yeast infections)\n","Tingling or numbness in hands and feet\n","Fatigue\"\"\"\n","DOCUMENT3 = \"\"\"Causes and Risk Factors:\n","Type 1 Diabetes: The exact cause is unknown but involves genetic predisposition and environmental factors.\n","Type 2 Diabetes: Risk factors include:\n","Family history of diabetes[4][9][10]\n","Overweight or obesity\n","Physical inactivity\n","Age (risk increases with age)[4]\n","High blood pressure\n","Abnormal cholesterol levels\n","History of gestational diabetes[3][6][7]\n","Ethnicity (certain ethnicities are at higher risk)[4]\n","Gestational Diabetes: Risk factors include obesity, family history of diabetes, and previous gestational diabetes.\"\"\"\n","DOCUMENT4 = \"\"\"Diagnosis:\n","Diabetes is diagnosed through blood tests that measure blood glucose levels.[5][6][7][10][11] Common tests include:\n","Fasting Plasma Glucose (FPG): Measures blood glucose after an overnight fast (at least 8 hours). A level of 126 mg/dL (7.0 mmol/L) or higher indicates diabetes.[11]\n","Oral Glucose Tolerance Test (OGTT): Measures blood glucose levels two hours after drinking a sugary drink. A level of 200 mg/dL (11.1 mmol/L) or higher indicates diabetes.[2][11]\n","A1C Test: Measures average blood glucose levels over the past 2-3 months.[5] An A1C of 6.5% or higher indicates diabetes.[6]\n","Random Plasma Glucose: A blood glucose test taken at any time of day, without regard to meals. Used when someone has severe symptoms of diabetes.\n","\"\"\"\n","documents = [DOCUMENT1, DOCUMENT2, DOCUMENT3, DOCUMENT4]"]},{"cell_type":"code","execution_count":10,"id":"d4d8b359","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:34.508171Z","iopub.status.busy":"2025-05-06T11:04:34.507808Z","iopub.status.idle":"2025-05-06T11:04:35.303541Z","shell.execute_reply":"2025-05-06T11:04:35.302208Z"},"papermill":{"duration":0.806994,"end_time":"2025-05-06T11:04:35.305372","exception":false,"start_time":"2025-05-06T11:04:34.498378","status":"completed"},"tags":[]},"outputs":[],"source":["from chromadb import Documents, EmbeddingFunction, Embeddings\n","from google.api_core import retry\n","\n","from google.genai import types\n","\n","# Define a helper to retry when per-minute quota is reached.\n","is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n","\n","class GeminiEmbeddingFunction(EmbeddingFunction):\n","    # Specify whether to generate embeddings for documents, or queries\n","    document_mode = True\n","\n","    @retry.Retry(predicate=is_retriable)\n","    def __call__(self, input: Documents) -> Embeddings:\n","        if self.document_mode:\n","            embedding_task = \"retrieval_document\"\n","        else:\n","            embedding_task = \"retrieval_query\"\n","\n","        response = client.models.embed_content(\n","            model=\"models/text-embedding-004\",\n","            contents=input,\n","            config=types.EmbedContentConfig(\n","                task_type=embedding_task,\n","            ),\n","        )\n","        return [e.values for e in response.embeddings]"]},{"cell_type":"code","execution_count":11,"id":"e792a34c","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:35.323685Z","iopub.status.busy":"2025-05-06T11:04:35.323357Z","iopub.status.idle":"2025-05-06T11:04:36.166259Z","shell.execute_reply":"2025-05-06T11:04:36.164979Z"},"papermill":{"duration":0.854206,"end_time":"2025-05-06T11:04:36.168229","exception":false,"start_time":"2025-05-06T11:04:35.314023","status":"completed"},"tags":[]},"outputs":[],"source":["import chromadb\n","\n","DB_NAME = \"googlecardb\"\n","\n","embed_fn = GeminiEmbeddingFunction()\n","embed_fn.document_mode = True\n","\n","chroma_client = chromadb.Client()\n","db = chroma_client.get_or_create_collection(name=DB_NAME, embedding_function=embed_fn)\n","\n","db.add(documents=documents, ids=[str(i) for i in range(len(documents))])"]},{"cell_type":"code","execution_count":12,"id":"c3e48b64","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:36.186915Z","iopub.status.busy":"2025-05-06T11:04:36.186566Z","iopub.status.idle":"2025-05-06T11:04:36.378014Z","shell.execute_reply":"2025-05-06T11:04:36.376922Z"},"papermill":{"duration":0.202284,"end_time":"2025-05-06T11:04:36.37962","exception":false,"start_time":"2025-05-06T11:04:36.177336","status":"completed"},"tags":[]},"outputs":[{"data":{"text/markdown":["Diagnosis:\n","Diabetes is diagnosed through blood tests that measure blood glucose levels.[5][6][7][10][11] Common tests include:\n","Fasting Plasma Glucose (FPG): Measures blood glucose after an overnight fast (at least 8 hours). A level of 126 mg/dL (7.0 mmol/L) or higher indicates diabetes.[11]\n","Oral Glucose Tolerance Test (OGTT): Measures blood glucose levels two hours after drinking a sugary drink. A level of 200 mg/dL (11.1 mmol/L) or higher indicates diabetes.[2][11]\n","A1C Test: Measures average blood glucose levels over the past 2-3 months.[5] An A1C of 6.5% or higher indicates diabetes.[6]\n","Random Plasma Glucose: A blood glucose test taken at any time of day, without regard to meals. Used when someone has severe symptoms of diabetes.\n"],"text/plain":["<IPython.core.display.Markdown object>"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["# Switch to query mode when generating embeddings.\n","embed_fn.document_mode = False\n","\n","# Search the Chroma DB using the specified query.\n","query = \"How do you diagnose diabetese?\"\n","\n","result = db.query(query_texts=[query], n_results=1)\n","[all_passages] = result[\"documents\"]\n","\n","Markdown(all_passages[0])"]},{"cell_type":"code","execution_count":13,"id":"b6cbbb16","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:36.397774Z","iopub.status.busy":"2025-05-06T11:04:36.397412Z","iopub.status.idle":"2025-05-06T11:04:37.906884Z","shell.execute_reply":"2025-05-06T11:04:37.905388Z"},"papermill":{"duration":1.520436,"end_time":"2025-05-06T11:04:37.908593","exception":false,"start_time":"2025-05-06T11:04:36.388157","status":"completed"},"tags":[]},"outputs":[{"data":{"text/markdown":["Diagnosing diabetes involves checking your blood sugar levels through a few different tests. One common test is the Fasting Plasma Glucose (FPG) test, which measures your blood sugar after you've fasted overnight, and a level of 126 mg/dL or higher may indicate diabetes. Another test is the Oral Glucose Tolerance Test (OGTT), where they measure your blood sugar two hours after you drink a sugary drink, and a level of 200 mg/dL or higher may indicate diabetes. There's also the A1C test, which gives you an average of your blood sugar levels over the past 2-3 months, with a result of 6.5% or higher potentially indicating diabetes. Lastly, there's a Random Plasma Glucose test, which can be taken at any time of day, regardless of when you last ate, and it's typically used when someone is showing severe diabetes symptoms.\n"],"text/plain":["<IPython.core.display.Markdown object>"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["query_oneline = query.replace(\"\\n\", \" \")\n","\n","# This prompt is where you can specify any guidance on tone, or what topics the model should stick to, or avoid.\n","prompt = f\"\"\"You are a helpful and informative bot that answers questions using text from the reference passage included below. \n","Be sure to respond in a complete sentence, being comprehensive, including all relevant background information. \n","However, you are talking to a non-technical audience, so be sure to break down complicated concepts and \n","strike a friendly and converstional tone. If the passage is irrelevant to the answer, you may ignore it.\n","\n","QUESTION: {query_oneline}\n","\"\"\"\n","\n","# Add the retrieved documents to the prompt.\n","for passage in all_passages:\n","    passage_oneline = passage.replace(\"\\n\", \" \")\n","    prompt += f\"PASSAGE: {passage_oneline}\\n\"\n","\n","#print(prompt)\n","answer = client.models.generate_content(\n","    model=\"gemini-2.0-flash\",\n","    contents=prompt)\n","\n","Markdown(answer.text)"]},{"cell_type":"markdown","id":"086b1e2b","metadata":{"editable":false,"papermill":{"duration":0.008326,"end_time":"2025-05-06T11:04:37.925454","exception":false,"start_time":"2025-05-06T11:04:37.917128","status":"completed"},"tags":[]},"source":["### <font color=\"blue\"> SECTION 4:"]},{"cell_type":"markdown","id":"f87b3066","metadata":{"editable":false,"papermill":{"duration":0.008675,"end_time":"2025-05-06T11:04:37.943521","exception":false,"start_time":"2025-05-06T11:04:37.934846","status":"completed"},"tags":[]},"source":["<span style=\"color: darkblue;\">This section sets up interaction with a SQLite database containing diabetes data. It imports necessary libraries, reads data from a CSV file into a Pandas DataFrame, and then writes the DataFrame to a SQLite database table. It defines functions to list tables, describe a table's schema, and execute SQL queries. Finally, it demonstrates how to use these functions with a language model to answer questions about the data in the database. This showcases function calling capabilities."]},{"cell_type":"code","execution_count":14,"id":"1674107a","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:37.964134Z","iopub.status.busy":"2025-05-06T11:04:37.9638Z","iopub.status.idle":"2025-05-06T11:04:37.970403Z","shell.execute_reply":"2025-05-06T11:04:37.969237Z"},"papermill":{"duration":0.018537,"end_time":"2025-05-06T11:04:37.972255","exception":false,"start_time":"2025-05-06T11:04:37.953718","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["'1.7.0'"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["from google import genai\n","from google.genai import types\n","genai.__version__"]},{"cell_type":"code","execution_count":15,"id":"5cdefcb8","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:37.990998Z","iopub.status.busy":"2025-05-06T11:04:37.990607Z","iopub.status.idle":"2025-05-06T11:04:40.443269Z","shell.execute_reply":"2025-05-06T11:04:40.441723Z"},"papermill":{"duration":2.464205,"end_time":"2025-05-06T11:04:40.445373","exception":false,"start_time":"2025-05-06T11:04:37.981168","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["CSV data successfully imported into SQLite database: /kaggle/working/DiabeteseDataDb.db, table: diabetesdata\n"]}],"source":["import pandas as pd\n","import sqlite3\n","\n","# CSV file path (within Kaggle input directory)\n","csv_file = '/kaggle/input/diabetes-health-dataset-analysis/diabetes_data.csv' \n","\n","# SQLite database file path (within Kaggle working directory)\n","db_file = '/kaggle/working/DiabeteseDataDb.db'  #  Persisted in /kaggle/working/\n","\n","# Table name in the SQLite database\n","table_name = 'diabetesdata'  #  Name your table\n","\n","try:\n","    # Read the CSV file into a pandas DataFrame\n","    df = pd.read_csv(csv_file)\n","\n","    # Connect to the SQLite database (creates the file if it doesn't exist)\n","    conn = sqlite3.connect(db_file)\n","\n","    # Write the DataFrame to the SQLite database\n","    df.to_sql(table_name, conn, if_exists='replace', index=False)  # 'replace' overwrites table if it exists\n","\n","    # Commit the changes\n","    conn.commit()\n","    print(f\"CSV data successfully imported into SQLite database: {db_file}, table: {table_name}\")\n","\n","except FileNotFoundError:\n","    print(f\"Error: CSV file not found at: {csv_file}\")\n","except sqlite3.Error as e:\n","    print(f\"SQLite error: {e}\")\n","except Exception as e:\n","    print(f\"General error: {e}\")\n","\n","#finally:\n","#    if conn:\n","#        conn.close() # close connection if it's open"]},{"cell_type":"code","execution_count":16,"id":"05a51e7e","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:40.46459Z","iopub.status.busy":"2025-05-06T11:04:40.464307Z","iopub.status.idle":"2025-05-06T11:04:40.469885Z","shell.execute_reply":"2025-05-06T11:04:40.468647Z"},"papermill":{"duration":0.017471,"end_time":"2025-05-06T11:04:40.471672","exception":false,"start_time":"2025-05-06T11:04:40.454201","status":"completed"},"tags":[]},"outputs":[],"source":["db_file = \"DiabeteseDataDb.db\"\n","table_name = 'diabetesdata'\n","db_conn = sqlite3.connect(db_file)\n","cursor = db_conn.cursor()"]},{"cell_type":"code","execution_count":17,"id":"95c05ab4","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:40.49134Z","iopub.status.busy":"2025-05-06T11:04:40.491021Z","iopub.status.idle":"2025-05-06T11:04:40.501119Z","shell.execute_reply":"2025-05-06T11:04:40.500135Z"},"papermill":{"duration":0.022185,"end_time":"2025-05-06T11:04:40.502723","exception":false,"start_time":"2025-05-06T11:04:40.480538","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":[" - DB CALL: list_tables()\n"]},{"data":{"text/plain":["['diabetesdata']"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["def list_tables() -> list[str]:\n","    \"\"\"Retrieve the names of all tables in the database.\"\"\"\n","    # Include print logging statements so you can see when functions are being called.\n","    print(' - DB CALL: list_tables()')\n","\n","    cursor = db_conn.cursor()\n","\n","    # Fetch the table names.\n","    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n","\n","    tables = cursor.fetchall()\n","    return [t[0] for t in tables]\n","\n","# change / exclude ***\n","list_tables()"]},{"cell_type":"code","execution_count":18,"id":"8960625b","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:40.522447Z","iopub.status.busy":"2025-05-06T11:04:40.522018Z","iopub.status.idle":"2025-05-06T11:04:40.535014Z","shell.execute_reply":"2025-05-06T11:04:40.533849Z"},"papermill":{"duration":0.024674,"end_time":"2025-05-06T11:04:40.536624","exception":false,"start_time":"2025-05-06T11:04:40.51195","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":[" - DB CALL: describe_table(diabetesdata)\n"]},{"data":{"text/plain":["[(0, 'PatientID', 'INTEGER'),\n"," (1, 'Age', 'INTEGER'),\n"," (2, 'Gender', 'INTEGER'),\n"," (3, 'Ethnicity', 'INTEGER'),\n"," (4, 'SocioeconomicStatus', 'INTEGER'),\n"," (5, 'EducationLevel', 'INTEGER'),\n"," (6, 'BMI', 'REAL'),\n"," (7, 'Smoking', 'INTEGER'),\n"," (8, 'AlcoholConsumption', 'REAL'),\n"," (9, 'PhysicalActivity', 'REAL'),\n"," (10, 'DietQuality', 'REAL'),\n"," (11, 'SleepQuality', 'REAL'),\n"," (12, 'FamilyHistoryDiabetes', 'INTEGER'),\n"," (13, 'GestationalDiabetes', 'INTEGER'),\n"," (14, 'PolycysticOvarySyndrome', 'INTEGER'),\n"," (15, 'PreviousPreDiabetes', 'INTEGER'),\n"," (16, 'Hypertension', 'INTEGER'),\n"," (17, 'SystolicBP', 'INTEGER'),\n"," (18, 'DiastolicBP', 'INTEGER'),\n"," (19, 'FastingBloodSugar', 'REAL'),\n"," (20, 'HbA1c', 'REAL'),\n"," (21, 'SerumCreatinine', 'REAL'),\n"," (22, 'BUNLevels', 'REAL'),\n"," (23, 'CholesterolTotal', 'REAL'),\n"," (24, 'CholesterolLDL', 'REAL'),\n"," (25, 'CholesterolHDL', 'REAL'),\n"," (26, 'CholesterolTriglycerides', 'REAL'),\n"," (27, 'AntihypertensiveMedications', 'INTEGER'),\n"," (28, 'Statins', 'INTEGER'),\n"," (29, 'AntidiabeticMedications', 'INTEGER'),\n"," (30, 'FrequentUrination', 'INTEGER'),\n"," (31, 'ExcessiveThirst', 'INTEGER'),\n"," (32, 'UnexplainedWeightLoss', 'INTEGER'),\n"," (33, 'FatigueLevels', 'REAL'),\n"," (34, 'BlurredVision', 'INTEGER'),\n"," (35, 'SlowHealingSores', 'INTEGER'),\n"," (36, 'TinglingHandsFeet', 'INTEGER'),\n"," (37, 'QualityOfLifeScore', 'REAL'),\n"," (38, 'HeavyMetalsExposure', 'INTEGER'),\n"," (39, 'OccupationalExposureChemicals', 'INTEGER'),\n"," (40, 'WaterQuality', 'INTEGER'),\n"," (41, 'MedicalCheckupsFrequency', 'REAL'),\n"," (42, 'MedicationAdherence', 'REAL'),\n"," (43, 'HealthLiteracy', 'REAL'),\n"," (44, 'Diagnosis', 'INTEGER'),\n"," (45, 'DoctorInCharge', 'TEXT')]"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["def describe_table(table_name: str) -> list[tuple[str, str]]:\n","    \"\"\"Look up the table schema.\n","\n","    Returns:\n","      List of columns, where each entry is a tuple of (column, type).\n","    \"\"\"\n","    print(f' - DB CALL: describe_table({table_name})')\n","\n","    cursor = db_conn.cursor()\n","\n","    cursor.execute(f\"PRAGMA table_info({table_name});\")\n","\n","    schema = cursor.fetchall()\n","    # [column index, column name, column type, ...]\n","    return [(col[0],col[1], col[2]) for col in schema]\n","\n","# change / exclude ***\n","describe_table(\"diabetesdata\")"]},{"cell_type":"code","execution_count":19,"id":"001cb108","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:40.631364Z","iopub.status.busy":"2025-05-06T11:04:40.631046Z","iopub.status.idle":"2025-05-06T11:04:40.636595Z","shell.execute_reply":"2025-05-06T11:04:40.635586Z"},"papermill":{"duration":0.092494,"end_time":"2025-05-06T11:04:40.638919","exception":false,"start_time":"2025-05-06T11:04:40.546425","status":"completed"},"tags":[]},"outputs":[],"source":["def execute_query(sql: str) -> list[list[str]]:\n","    \"\"\"Execute an SQL statement, returning the results.\"\"\"\n","    print(f' - DB CALL: execute_query({sql})')\n","\n","    cursor = db_conn.cursor()\n","\n","    cursor.execute(sql)\n","    return cursor.fetchall()\n","\n","# change / exclude ***\n","#execute_query(\"select * from diabetesdata where PatientID = 6000\")"]},{"cell_type":"code","execution_count":20,"id":"30dd5f49","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:40.659103Z","iopub.status.busy":"2025-05-06T11:04:40.658804Z","iopub.status.idle":"2025-05-06T11:04:40.799322Z","shell.execute_reply":"2025-05-06T11:04:40.797955Z"},"papermill":{"duration":0.152628,"end_time":"2025-05-06T11:04:40.801177","exception":false,"start_time":"2025-05-06T11:04:40.648549","status":"completed"},"tags":[]},"outputs":[],"source":["# These are the Python functions defined above.\n","db_tools = [list_tables, describe_table, execute_query]\n","\n","instruction = \"\"\"You are a helpful chatbot that can interact with an SQL database with \n","detailed health information for diabetes research in the diabetesdata table. You will take the users questions and turn them into SQL\n","queries using the tools available. Once you have the information you need, you will\n","answer the user's question using the data returned.\n","\n","Use list_tables to see what tables are present, describe_table to understand the\n","schema, and execute_query to issue an SQL SELECT query.\"\"\"\n","\n","client = genai.Client(api_key=GOOGLE_API_KEY)\n","\n","# Start a chat with automatic function calling enabled.\n","chat = client.chats.create(\n","    model=\"gemini-2.0-flash\",\n","    config=types.GenerateContentConfig(\n","        system_instruction=instruction,\n","        tools=db_tools,\n","    ),\n",")"]},{"cell_type":"code","execution_count":21,"id":"34fc3042","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:40.822131Z","iopub.status.busy":"2025-05-06T11:04:40.821683Z","iopub.status.idle":"2025-05-06T11:04:42.153351Z","shell.execute_reply":"2025-05-06T11:04:42.152148Z"},"papermill":{"duration":1.343768,"end_time":"2025-05-06T11:04:42.155264","exception":false,"start_time":"2025-05-06T11:04:40.811496","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":[" - DB CALL: execute_query(SELECT CAST(SUM(CASE WHEN diagnosis = 1 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS diagnosis_percentage FROM diabetesdata;)\n","\n","The percentage of rows in the diabetesdata table with a diagnosis of 1 is 40.02%.\n"]}],"source":["#resp = chat.send_message(\"What is the total number of rows in the diabetesdata table in the database?\")\n","#resp = chat.send_message(\"What is the number of people with diabetes in the database?\")\n","#resp = chat.send_message(\"What is the number of people without diabetes?\")\n","\n","resp = chat.send_message(\"What are the percent of rows in the diabetesdata table in the database with a diagnosis of 1?\")\n","\n","print(f\"\\n{resp.text}\")"]},{"cell_type":"code","execution_count":22,"id":"e66ee29f","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:42.176216Z","iopub.status.busy":"2025-05-06T11:04:42.175818Z","iopub.status.idle":"2025-05-06T11:04:43.899282Z","shell.execute_reply":"2025-05-06T11:04:43.897103Z"},"papermill":{"duration":1.73655,"end_time":"2025-05-06T11:04:43.901896","exception":false,"start_time":"2025-05-06T11:04:42.165346","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":[" - DB CALL: execute_query(SELECT sum(CASE WHEN Diagnosis = 1 AND TinglingHandsFeet = 1 THEN 1 ELSE 0 END) AS TinglingHandsFeet_count, sum(CASE WHEN Diagnosis = 1 AND SlowHealingSores = 1 THEN 1 ELSE 0 END) AS SlowHealingSores_count, sum(CASE WHEN Diagnosis = 1 AND BlurredVision = 1 THEN 1 ELSE 0 END) AS BlurredVision_count FROM diabetesdata)\n","\n","Of the three conditions, TinglingHandsFeet is the most common among people with a diagnosis of 1. There are 87 cases of TinglingHandsFeet, 79 cases of SlowHealingSores, and 82 cases of BlurredVision.\n","\n"]}],"source":["chat = client.chats.create(\n","    model=\"gemini-2.0-flash\",\n","    config=types.GenerateContentConfig(\n","        system_instruction=instruction,\n","        tools=db_tools,\n","    ),\n",")\n","\n","#response = chat.send_message('What is the total number of people with Diagnosis of 1 in the diabetesdata table in the database? Explain why.')\n","#response = chat.send_message('What is the most common condition between TinglingHandsFeet, SlowHealingSores, and BlurredVision of people with Diagnosis of 1 in the diabetesdata table in the database? Explain why.')\n","response = chat.send_message('Of the conditions TinglingHandsFeet, SlowHealingSores, and BlurredVision which is the most common of people with Diagnosis of 1 in the diabetesdata table in the database? Explain why.')\n","\n","print(f\"\\n{response.text}\")"]},{"cell_type":"code","execution_count":23,"id":"74175429","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:43.924528Z","iopub.status.busy":"2025-05-06T11:04:43.924228Z","iopub.status.idle":"2025-05-06T11:04:43.932633Z","shell.execute_reply":"2025-05-06T11:04:43.931267Z"},"papermill":{"duration":0.021458,"end_time":"2025-05-06T11:04:43.934709","exception":false,"start_time":"2025-05-06T11:04:43.913251","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["User:\n","  \"Of the conditions TinglingHandsFeet, SlowHealingSores, and BlurredVision which is the most common of people with Diagnosis of 1 in the diabetesdata table in the database? Explain why.\"\n","\n","Model:\n","  Function call: execute_query(sql=SELECT sum(CASE WHEN Diagnosis = 1 AND TinglingHandsFeet = 1 THEN 1 ELSE 0 END) AS TinglingHandsFeet_count, sum(CASE WHEN Diagnosis = 1 AND SlowHealingSores = 1 THEN 1 ELSE 0 END) AS SlowHealingSores_count, sum(CASE WHEN Diagnosis = 1 AND BlurredVision = 1 THEN 1 ELSE 0 END) AS BlurredVision_count FROM diabetesdata)\n","\n","User:\n","  Function response:\n","    [(87, 79, 82)]\n","\n","Model:\n","  \"Of the three conditions, TinglingHandsFeet is the most common among people with a diagnosis of 1. There are 87 cases of TinglingHandsFeet, 79 cases of SlowHealingSores, and 82 cases of BlurredVision.\n","\"\n","\n"]}],"source":["\n","# change / exclude ***\n","import textwrap\n","\n","def print_chat_turns(chat):\n","    \"\"\"Prints out each turn in the chat history, including function calls and responses.\"\"\"\n","    for event in chat.get_history():\n","        print(f\"{event.role.capitalize()}:\")\n","\n","        for part in event.parts:\n","            if txt := part.text:\n","                print(f'  \"{txt}\"')\n","            elif fn := part.function_call:\n","                args = \", \".join(f\"{key}={val}\" for key, val in fn.args.items())\n","                print(f\"  Function call: {fn.name}({args})\")\n","            elif resp := part.function_response:\n","                print(\"  Function response:\")\n","                print(textwrap.indent(str(resp.response['result']), \"    \"))\n","\n","        print()\n","\n","\n","print_chat_turns(chat)"]},{"cell_type":"markdown","id":"83d13062","metadata":{"editable":false,"papermill":{"duration":0.009134,"end_time":"2025-05-06T11:04:43.953846","exception":false,"start_time":"2025-05-06T11:04:43.944712","status":"completed"},"tags":[]},"source":["### <font color=\"blue\">  SECTION 5:"]},{"cell_type":"markdown","id":"ba7ead92","metadata":{"editable":false,"papermill":{"duration":0.010964,"end_time":"2025-05-06T11:04:43.978288","exception":false,"start_time":"2025-05-06T11:04:43.967324","status":"completed"},"tags":[]},"source":["<span style=\"color: darkblue;\">This section demonstrates the use of Google Search grounding to enhance the response of the language model. It configures the model to use Google Search as a tool and then queries the model for information on diabetes, specifically asking for the best resources and their last updates. The model uses Google Search to find relevant information and includes it in its response, providing up-to-date and grounded answers."]},{"cell_type":"code","execution_count":24,"id":"4930ad29","metadata":{"editable":false,"execution":{"iopub.execute_input":"2025-05-06T11:04:44.039406Z","iopub.status.busy":"2025-05-06T11:04:44.039072Z","iopub.status.idle":"2025-05-06T11:04:50.756018Z","shell.execute_reply":"2025-05-06T11:04:50.754848Z"},"papermill":{"duration":6.76748,"end_time":"2025-05-06T11:04:50.757704","exception":false,"start_time":"2025-05-06T11:04:43.990224","status":"completed"},"tags":[]},"outputs":[{"data":{"text/markdown":["Here are some of the best resources for information on diabetes, along with details on their recent updates: \n","\n"," **1. American Diabetes Association (ADA)** \n","\n"," *   **What it is:** A leading voluntary health organization dedicated to fighting diabetes and helping people thrive. They offer a wide array of resources, including educational programs, a food hub with recipes, and guidance on diabetes management. \n"," *   **Last Updates:** \n"," *   The ADA released the \"Standards of Care in Diabetes—2025\" in December 2024, offering evidence-based guidelines for diagnosing and managing diabetes and prediabetes.\n"," *   Key updates in the 2025 standards include: \n"," *   Consideration of continuous glucose monitoring (CGM) for adults with type 2 diabetes using glucose-lowering agents other than insulin. \n"," *   Emphasis on antibody-based screening for pre-symptomatic type 1 diabetes in those with a family history or known genetic risk. \n"," *   Guidance on recreational cannabis use for type 1 diabetes and those at risk for diabetic ketoacidosis (DKA). \n"," *   Revised recommendations for pharmacotherapy choices for individuals with type 2 diabetes and established or high risk of cardiovascular disease, heart failure, and chronic kidney disease. \n"," *   Updated recommendations for screening for diabetes distress and anxiety. \n"," *   The ADA updates its \"Standards of Care\" annually. \n","\n"," **2. National Institute of Diabetes and Digestive and Kidney Diseases (NIDDK)** \n","\n"," *   **What it is:**  Part of the National Institutes of Health, the NIDDK conducts and supports research on diabetes and related diseases. They offer information for patients, health professionals, and the public. \n"," *   **Last Updates:** \n"," *   NIDDK's Director, Dr. Griffin P. Rodgers, provided a Winter 2025 update reflecting on the institute's 75th anniversary and research advancements in diabetes prevention and treatment. \n"," *   The \"Kidney Disease: Fact Sheet\" was last reviewed in May 2023. \n"," *   They also provide various reports and statistics on diabetes, with the latest data on prevalence, costs, and other factors. \n","\n"," **3. Centers for Disease Control and Prevention (CDC)** \n","\n"," *   **What it is:** A leading national public health institute that provides information and resources on diabetes prevention and management. \n"," *   **Last Updates:** \n"," *   The CDC's \"National Diabetes Statistics Report\" was updated on May 15, 2024, providing the latest data on diabetes and prediabetes prevalence, risk factors, and complications. \n"," *   The CDC offers resources on healthy eating, weight management, and preventing type 2 diabetes. \n","\n"," **4. Diabetes UK** \n","\n"," *   **What it is:** A UK-based organization providing information and support for people with diabetes. \n"," *   **Last Updates:** They offer updated guides on various types of diabetes, including type 1, type 2, and gestational diabetes. They also provide resources for newly diagnosed individuals. \n","\n"," Keep in mind that information and guidelines in the field of diabetes are continually updated, so it's always a good idea to check the publication or last reviewed date on any resources you use.\n"],"text/plain":["<IPython.core.display.Markdown object>"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["# Run the query with search grounding enabled.\n","config_with_search = types.GenerateContentConfig(\n","    tools=[types.Tool(google_search=types.GoogleSearch())],\n",")\n","\n","def query_with_grounding():\n","    response = client.models.generate_content(\n","        model='gemini-2.0-flash',\n","        contents=\"What are the best resources for information on diabetes and what were the last updates to there resources\",\n","        config=config_with_search,\n","    )\n","    return response.candidates[0]\n","\n","\n","rc = query_with_grounding()\n","Markdown(rc.content.parts[0].text)"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5192952,"sourceId":8665939,"sourceType":"datasetVersion"}],"dockerImageVersionId":31012,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.11"},"papermill":{"default_parameters":{},"duration":94.5389,"end_time":"2025-05-06T11:04:51.89168","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-05-06T11:03:17.35278","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}